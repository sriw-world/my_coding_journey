# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        head1 = list1
        head2 = list2
        temp1 , temp2 = head1 , head2
        head3,tail3 = None,None
        i,j = 0,0
        while temp1 is not None and temp2 is not None:
            if temp1.val <= temp2.val:
                if head3 is None:
                    head3 = ListNode(temp1.val)
                    tail3 = head3
                    temp1 = temp1.next
                else:
                    newnode = ListNode(temp1.val)
                    tail3.next = newnode
                    tail3 = newnode
                    temp1 = temp1.next
            else:
                if head3 is None:
                    head3 = ListNode(temp2.val)
                    tail3 = head3
                    temp2 = temp2.next
                else:
                    newnode = ListNode(temp2.val)
                    tail3.next = newnode
                    tail3 = newnode
                    temp2 = temp2.next

        while temp2 is not None:
            if head3 is None:
                head3 = ListNode(temp2.val)
                tail3 = head3
                temp2 = temp2.next
            else:
                newnode = ListNode(temp2.val)
                tail3.next = newnode
                tail3 = newnode
                temp2 = temp2.next
    
        while temp1 is not None:
            if head3 is None:
                head3 = ListNode(temp1.val)
                tail3 = head3
                temp1 = temp1.next
            else:
                newnode = ListNode(temp1.val)
                tail3.next = newnode
                tail3 = newnode
                temp1 = temp1.next

        return head3
