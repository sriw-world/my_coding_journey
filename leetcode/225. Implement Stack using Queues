#pop expensive operation

from queue  import Queue
class MyStack:
    def __init__(self):
        self.q1 = Queue()
        self.q2 = Queue()

    def push(self, x: int) -> None:
        self.q1.put(x)
        
    def pop(self) -> int:
        if self.q1.qsize() != 0:
            for _ in range(self.q1.qsize()-1):
                self.q2.put(self.q1.get())
            a = self.q1.get()
            print(a)
            self.q1,self.q2 = self.q2,self.q1
            return a
        return -1

    def top(self) -> int:

        if self.q1.qsize() != 0:
            for _ in range(self.q1.qsize()-1):
                self.q2.put(self.q1.get())
            a = self.q1.get()
            self.q2.put(a)
            self.q1,self.q2 = self.q2,self.q1
            return a
        return -1
        

    def empty(self) -> bool:
        return self.q1.empty()

# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
