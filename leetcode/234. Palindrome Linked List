# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:

        if head is None or head.next is None:
            return True

        fast = head
        slow = head
        while fast is not None and fast.next is not None:
            fast = fast.next.next
            prev = slow
            slow = slow.next
        prev.next  = None

        curr = slow
        prev = None

        while curr:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        
        while head and prev:
            print(head.val , prev.val)
            if head.val != prev.val:
                return False
            head = head.next
            prev = prev.next
        return True
