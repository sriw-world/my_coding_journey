# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if root == None:
            return None
        if root.val == val:
            return root
        if root.val>val:
            return self.searchBST(root.left,val)
        if root.val < val:
            return self.searchBST(root.right,val)

######2nd soln
from queue import Queue
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        q = Queue()
        q.put(root)
        while not q.empty():
            res = []
            print(root.val,q.qsize())
            for i in range(q.qsize()):
                node = q.get()
                if node is not None :
                    if node.val == val:
                        return node
                    if node.left is not None:
                        q.put(node.left)
                    if node.right is not None:
                        q.put(node.right)    
        return None

