'''
And operation between multiple of 2 and next lower number will always give 0 and other wise it will never be 0.

example 1: 8 & 7
1000(8) & 0111(7) => 0000(0)

example 1: = 10 & 9
1010(10) & 1001(9) => 1000(8)
'''
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        return True if n>0 and (n&(n-1)) ==0 else False
        
'''
Left Shift 1 until its equal to n
'''
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        x = 1
        while x<=n:
            if x == n:
                return True
            x = x << 1
        return False 
		
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if n <= 0:
            return False
        if n == 1:
            return True
        return (n % 2 == 0) and self.isPowerOfTwo(n // 2)
		
'''
As we know multuple of 2 will only have a single 1 in their binary representation.
'''
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if n <= 0:
            return False
        cnt = bin(n).count('1')
        return cnt == 1
		
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n==0)return false;
        
        while(n>0){
            if(n==1)return true;
            if(n %2 !=0)break;
            n /=2;
        }
        return false;
    }
};


