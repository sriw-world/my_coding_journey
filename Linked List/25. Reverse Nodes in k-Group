# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def length(self,head,k):
        c = 0
        while head is not None:
            c += 1
            head = head.next
        return c

    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:

        if self.length(head,k) < k :
            return head

        curr = head
        prev = None
        c = 0
        while (curr is not None ) and (c<k):
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
            c += 1
        
        if next is not None:
            head.next = self.reverseKGroup(next,k)
        return prev
