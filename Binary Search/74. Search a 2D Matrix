O(logn + logm)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n = len(matrix)
        m = len(matrix[0])

        # apply binary search:
        low = 0
        high = n * m - 1
        while low <= high:
            mid = (low + high) // 2
            row = mid // m
            col = mid % m
            if matrix[row][col] == target:
                return True
            elif matrix[row][col] < target:
                low = mid + 1
            else:
                high = mid - 1
        return False
 
        
		
O(n+ logm)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def search(row,target):
            low = 0
            high = len(row) - 1

            while low <= high :
                mid = (low+high)//2
                if row[mid] == target:
                    return True
                elif row[mid] < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return False

                    

        for i in range(len(matrix)):
            if matrix[i][0] <= target and matrix[i][-1] >= target:
                return search(matrix[i],target)
 
        return False