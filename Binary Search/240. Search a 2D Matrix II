o(logn)
class Solution:
	def searchElement(matrix, target):
		n = len(matrix)
		m = len(matrix[0])
		row = 0
		col = m - 1

		# Traverse the matrix from (0, m-1):
		while row < n and col >= 0:
			if matrix[row][col] == target:
				return True
			elif matrix[row][col] < target:
				row += 1
			else:
				col -= 1
		return False

O(n*logm)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def search(row,target):
            low = 0
            high = len(row) - 1

            while low <= high :
                mid = (low+high)//2
                if row[mid] == target:
                    return True
                elif row[mid] < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return False

                    
        flag = False
        for i in range(len(matrix)):
            if matrix[i][0] <= target and matrix[i][-1] >= target:
                flag = search(matrix[i],target)
                if flag == True:
                    return True
        return flag