# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0
        head,tail = None,None
        while (l1 is not None) or (l2 is not None):
            l1_value = l1.val if l1 else 0
            l2_value = l2.val if l2 else 0
            total = l1_value + l2_value + carry
            carry = total//10
            print('carry',carry)
            if head is None:
                head = ListNode(total%10)
                tail = head
            else:
                tail.next = ListNode(total%10)
                tail = tail.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        
        if carry != 0 :
            tail.next = ListNode(carry)
        return head


#########################################################################

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        head = None
        l1_str= ''
        l2_str=''
        while l1 is not None:
            l1_str += str(l1.val)
            l1 = l1.next
        while l2 is not None:
            l2_str += str(l2.val)
            l2 = l2.next
        
        l1_str = l1_str[::-1]
        l2_str = l2_str[::-1]
        sum1 = int(l1_str) + int(l2_str)
        print(l1_str,l2_str,sum1)

        sum1 = str(sum1)[::-1]
        for i in sum1:
            if head is None:
                head = ListNode(i)
                tail = head
            else:
                tail.next = ListNode(i)
                tail = tail.next
        return head
