# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self,head):
        prev = None
        curr = head
        while curr is not None:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp
        return prev

    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
         
        head1 = None
        l1 = self.reverse(l1)
        l2 = self.reverse(l2)

        carry = 0
        tail = None
        while l1 is not None or l2 is not None:
            l1_val = l1.val if l1 else 0
            l2_val = l2.val if l2 else 0
            total = l1_val + l2_val + carry
            carry = total//10
            print(total,carry)
            if head1 is None:
                head1 = ListNode(total%10)
                tail = head1
            else:
                tail.next = ListNode(total%10)
                tail = tail.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        
        if carry != 0:
            tail.next = ListNode(carry)

        head1 = self.reverse(head1)
        return head1

        
        
