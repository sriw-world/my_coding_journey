# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def inorder(self,root):
        if root is None:
            return
        self.inorder(root.left)
        self.l.append(root.val)
        self.inorder(root.right)
    
    def treeupdate(self,root):
        if root is None:
            return
        self.treeupdate(root.left)
        root.val = self.l[self.idx]
        self.idx += 1
        self.treeupdate(root.right)

    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        self.l = []
        self.inorder(root)
        self.l = sorted(self.l)
        self.idx = 0
        self.treeupdate(root)
        return root
		
