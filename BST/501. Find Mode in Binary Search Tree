# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        d = {}
        def cal_mode(root,d):
            if root is None:
                return 
            if root.val not in d:
                d[root.val]=1
            else:
                d[root.val] += 1
            cal_mode(root.left,d)
            cal_mode(root.right,d)
        cal_mode(root,d)
        max_value = max(d.values())  # maximum value
        max_keys = [k for k, v in d.items() if v == max_value]
        return max_keys

        


# 2nd soln

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        self.count = 0
        self.ans = None
        def inorder_ksmall(root,k):
            if root is None:
                return 
            inorder_ksmall(root.left,k)
            if self.count == k-1:
                self.ans = root.val
            self.count +=1

            inorder_ksmall(root.right,k)
        
        inorder_ksmall(root,k)
        print(self.ans)
        return self.ans