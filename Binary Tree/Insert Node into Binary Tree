
from queue import Queue 
def insertbinarytree(root,val):
    if root is None:
        rootNode = NewNode
    else:
        q = Queue()
        q.put(root)
        while not q.empty():
            for i in range(q.qsize()):
                root = q.get()
                if root.left is not None:
                    q.put(root.left)
                else:
                    root.left = NewNode(val)
                    return
                if root.right is not None:
                    q.put(root.right)
                else:
                    root.right = NewNode(val)
                    return
                

# find deepenst node in  binary tree
from queue import Queue 
def getdeepestnodebinarytree(root):
    if root is None:
        return
    else:
        q = Queue()
        q.put(root)
        while not q.empty():
            root = q.get()
            if root.left is not None:
                q.put(root.left)
            if root.right is not None:
                q.put(root.right)
        val = root.val
        #return val
        return root

#delete deepest node
#last depth node can be found with getdeepestnodebinarytree
from queue import Queue 
def deletedeepestnodebinarytree(root,depnode):
    if root == depnode:
        root = None
        return
    else:
        q = Queue()
        q.put(root)
        while not q.empty():
            node = q.get()
            if node.left is not None:
                if node.left == depnode:
                    node.left = None
                    return
                else:
                    q.put(node.left)
            if node.right is not None:
                if node.right == depnode:
                    node.right = None
                    return
                else:
                    q.put(node.right)


#delete custom node in binary tree
from queue import Queue 
def deltenodebinarytree(root,data):
    if root == None:
        return
    else:
        q = Queue()
        q.put(root)
        while not q.empty():
            node = q.get()
            if node.val == data:
                getlastnode = getdeepestnodebinarytree(node)
                node.val = getlastnode.val
                deletedeepestnodebinarytree(root,getlastnode)
            if node.left is not None:
                q.put(node.left)
            if node.right is not None:
                q.put(node.right)


#delete binary tree
def delbinarytree(root):
    root.data = None
    root.left = None
    root.right = None
